print("hello")
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
if (!"caret" %in% installed.packages()) { install.packages("caret", dependencies = c("Depends", "Suggests")) }
library(caret)
if (!"caret" %in% installed.packages()) { install.packages("caret", dependencies = TRUE) }
library(caret)
install.packages("lme4", dependencies = TRUE)
library(lme4)
methods(sigma)
install.packages("pbkrtest", dependencies = TRUE)
if (!"caret" %in% installed.packages()) { install.packages("caret", dependencies = TRUE) }
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
install.packages("pbkrtest")
install.packages("caret")
library(caret)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
install.packages("caret")
library(caret)
# Neural Network
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
if (!"h2o" %in% installed.packages()) { install.packages("h2o") }
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
predicted = h2o.predict(model, newdata = as.h2o(test_set[-7]))
predicted = (predicted > 0.5)
predicted = as.vector(predicted)
cm = table(test_set[, 7], predicted)
predicted = h2o.predict(model, newdata = as.h2o(test_set[-7]))
predicted
predicted = (predicted > 0.5)
predicted
predicted = as.vector(predicted)
predicted
h2o.shutdown()
# Neural Network
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# using package 'h2o' for artificial neuraal network
if (!"h2o" %in% installed.packages()) { install.packages("h2o") }
library(h2o)
# number of threads for h2o server (-1: automatically)
h2o.init(nthreads = -1)
View(training_set)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
predicted = h2o.predict(model, newdata = as.h2o(test_set[-7]))
predicted
print (predicted)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
View(predicted)
cm = table(test_set[, 7], predicted[1])
predicted[1]
predicted[1].length
length(predicted[1])
nrow(predicted[1])
nrow(test_set)
nrow(test_set[,7])
nrow(test_set[,7])
test_set[,7]
predicted[1]
as.vector(predicted[1])
predicted[,1]
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(15,15),
epochs = 100,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(100,100),
epochs = 100,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Tanh',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Tanh',
hidden = c(50,50),
epochs = 1000,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Tanh',
hidden = c(50,50),
epochs = 150,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Tanh',
hidden = c(50,50),
epochs = 110,
train_samples_per_iteration = -2)
plot(model)
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
# with activation as 'Tanh' with (50,50) hidden layers with 150 epoch
model = h2o.deeplearning(y = 'left',
training_frame = as.h2o(training_set),
activation = 'Tanh',
hidden = c(50,50),
epochs = 150,
train_samples_per_iteration = -2)
# training se scoring history plot by h2o
plot(model)
# prediction on test data
predicted = as.data.frame(h2o.predict(model, newdata = as.h2o(test_set[-7])))
# find accuracy using confusion matrix
cm = table(test_set[, 7], predicted[,1])
confusionMatrix(cm)
h2o.shutdown()
