# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.001, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=2000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model with laplace value given
naive_bayes_model_with_laplace = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=2000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(naive_bayes_model_with_laplace, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# K-Nearest Neighbor Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
if (!"class" %in% installed.packages()) { install.packages("class") }
library(class)
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = 5)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
c= confusionMatrix(cm)
c
c$Accuracy
c$overall['Accuracy']
accuracyList = c()
for (k in 2:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
accuracy = confusionMatrix(cm)$overall['accuracy']
accuracyList = c(accuracyList, accuracy)
}
print( accuracyList )
accuracyList = c()
for (k in 2:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)$overall['accuracy']
accuracy = c$overall['Accuracy']
accuracyList = c(accuracyList, accuracy)
}
print( accuracyList )
accuracyList = c()
for (k in 2:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)$overall['accuracy']
accuracy = c$overall['Accuracy']
print( accuracy )
accuracyList = c(accuracyList, accuracy)
}
accuracyList = c()
for (k in 2:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
print( accuracy )
accuracyList = c(accuracyList, accuracy)
}
accuracyList = c()
for (k in 1:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
print( accuracy )
accuracyList = c(accuracyList, accuracy)
}
print( accuracyList )
accuracyList = c()
for (k in 1:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
print( "Value of K: "+k+ " Accuracy: "+accuracy )
accuracyList = c(accuracyList, accuracy)
}
accuracyList = c()
for (k in 1:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
sprintf("Value of K: %d Accuracy: %f", k, accuracy)
accuracyList = c(accuracyList, accuracy)
}
accuracyList = c()
for (k in 1:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
message("Value of K: ", k)
accuracyList = c(accuracyList, accuracy)
}
accuracyList = c()
for (k in 1:10) {
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = k)
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
message("Value of K: ", k, " Accuracy: ", accuracy)
accuracyList = c(accuracyList, accuracy)
}
# Logistic Regression Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# using 'glm' to construct logistic regression classifier
model = glm(formula = left ~ ., family = binomial, data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted > 0.5)
confusionMatrix(cm)
# Logistic Regression Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
model = glm(formula = left ~ ., family = binomial, data = training_set)
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
cm = table(test_set[, 7], predicted > 0.5)
cm
confusionMatrix(cm)
# K-Nearest Neighbor Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# using library 'class' for k-nn classifier
if (!"class" %in% installed.packages()) { install.packages("class") }
library(class)
# using k=5 for k-nn algorithm
predicted = knn(train = training_set[, -7], test = test_set[, -7],
cl = training_set[, 7], k = 5)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
cm
cm = table(test_set[, 7], predicted)
# Logistic Regression Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# using 'glm' to construct logistic regression classifier
model = glm(formula = left ~ ., family = binomial, data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
cm = table(test_set[, 7], predicted)
cm
confusionMatrix(cm)
predicted = ifelse(probPredicted > 0.3, 1, 0)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
predicted = ifelse(probPredicted > 0.7, 1, 0)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
predicted = ifelse(probPredicted > 0.6, 1, 0)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
predicted = ifelse(probPredicted > 0.5, 1, 0)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
falimyList = c(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
familyList = c(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
for (f in familyList) {
print(f)
}
familyList = list(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
for (f in familyList) {
print(f)
}
for (f in familyList) {
print(familyList[f])
}
familyList = c(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
for (f in familyList) {
message(f)
}
familyList = c(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
for (f in familyList) {
print(f)
}
familyList = c(binomial, gaussian, Gamma, inverse.gaussian, poisson, quasi, quasibinomial, quasipoisson)
for (f in familyList) {
model = glm(formula = left ~ ., family = binomial, data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
message("Family : ", f, " Accuracy: ", accuracy)
}
model = glm(formula = left ~ ., family = "binomial", data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
familyList = c("binomial", "gaussian", "Gamma", "inverse.gaussian", "poisson", "quasi", "quasibinomial", "quasipoisson")
for (f in familyList) {
print (f)
}
familyList = c("binomial", "gaussian", "Gamma", "inverse.gaussian", "poisson", "quasi", "quasibinomial", "quasipoisson")
for (f in familyList) {
model = glm(formula = left ~ ., family = binomial, data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.5, 1, 0)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
message("Family : ", f, " Accuracy: ", accuracy)
}
for (f in familyList) {
model = glm(formula = left ~ ., family = binomial, data = training_set)
# using logistic regression model to predict test data
probPredicted = predict(model, type = 'response', newdata = test_set[-7])
predicted = ifelse(probPredicted > 0.4, 1, 0)
# creating confusion matrix and find accuracy
cm = table(test_set[, 7], predicted)
c = confusionMatrix(cm)
accuracy = c$overall['Accuracy']
message("Family : ", f, " Accuracy: ", accuracy)
}
