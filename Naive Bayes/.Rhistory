set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# creating Random Forest model on training set
if (!"randomForest" %in% installed.packages()) { install.packages("randomForest") }
library(randomForest)
classifier = randomForest(x = training_set[-7],
y = training_set$left,
ntree = 300)
# predicting the test set with classifier
predicted = predict(classifier, newdata = test_set[-7])
# making Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
print(cm)
# choosing the number of trees
plot(classifier, main = "Number of trees in Random Forest Classifier")
# find accuracy using manual 5-fold cross validation with random forest
# randomly shuffle dataset
dataset = dataset[sample(nrow(dataset)),]
# create 10 equally size folds
folds = cut(seq(1,nrow(dataset)), breaks=5, labels=FALSE)
# process each fold one by one
accuracyList = c()
for(i in 1:10) {
# select fold i using which() function
testIndexes = which(folds==1, arr.ind=TRUE)
testData = dataset[testIndexes, ]
trainData = dataset[-testIndexes, ]
model = randomForest(x = trainData[-7], y = trainData$left, ntree = 300)
predicted = predict(model, newdata = testData[-7])
cm = table(testData[, 7], predicted)
accuracy = sum(diag(cm))/sum(cm)*100
accuracyList = c(accuracyList, accuracy)
}
# print list of accuracies and final average accuracy of 10-fold cross validation
print( accuracyList )
# [1] 99.20000 99.06667 99.13333 99.06667 99.13333 99.20000 99.13333 99.20000 99.13333 99.20000
print( mean(accuracyList) )
# [1] 99.14667
plot(classifier, main = "Number of trees in Random Forest Classifier")
# find accuracy using manual 5-fold cross validation with random forest
# randomly shuffle dataset
dataset = dataset[sample(nrow(dataset)),]
# create 5 equally size folds
nfold = 5
folds = cut(seq(1,nrow(dataset)), breaks=nfold, labels=FALSE)
# process each fold one by one
accuracyList = c()
for(i in 1:nfold) {
# select fold i using which() function
testIndexes = which(folds==1, arr.ind=TRUE)
testData = dataset[testIndexes, ]
trainData = dataset[-testIndexes, ]
model = randomForest(x = trainData[-7], y = trainData$left, ntree = 300)
predicted = predict(model, newdata = testData[-7])
cm = table(testData[, 7], predicted)
accuracy = sum(diag(cm))/sum(cm)*100
accuracyList = c(accuracyList, accuracy)
}
# print list of accuracies and final average accuracy of 10-fold cross validation
print( accuracyList )
# [1] 99.20000 99.06667 99.13333 99.06667 99.13333 99.20000 99.13333 99.20000 99.13333 99.20000
print( mean(accuracyList) )
# [1] 99.14667
# create 10 equally size folds for 10-fold cross validation
nfold = 10
folds = cut(seq(1,nrow(dataset)), breaks=nfold, labels=FALSE)
# process each fold one by one
accuracyList = c()
for(i in 1:nfold) {
# select fold i using which() function
testIndexes = which(folds==1, arr.ind=TRUE)
testData = dataset[testIndexes, ]
trainData = dataset[-testIndexes, ]
model = randomForest(x = trainData[-7], y = trainData$left, ntree = 300)
predicted = predict(model, newdata = testData[-7])
cm = table(testData[, 7], predicted)
accuracy = sum(diag(cm))/sum(cm)*100
accuracyList = c(accuracyList, accuracy)
}
# print list of accuracies and final average accuracy of 10-fold cross validation
print( accuracyList )
# [1] 98.93333 98.93333 98.96667 98.96667 98.93333
print( mean(accuracyList) )
# [1] 98.94667
# Support Vector Machine
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# importing library 'e1071' for SVM
if (!"e1071" %in% installed.packages()) { install.packages("e1071") }
library(e1071)
# liner kernel SVM classifier
linear_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
predicted = predict(linear_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
print(cm)
# Confusion Matrix and Statistics
#
# predicted
# 0    1
# 0 2147  139
# 1  540  174
#
# Accuracy : 0.7737
# 95% CI : (0.7583, 0.7885)
# No Information Rate : 0.8957
# P-Value [Acc > NIR] : 1
#
# Kappa : 0.2267
# Mcnemar's Test P-Value : <2e-16
#
# Sensitivity : 0.7990
# Specificity : 0.5559
# Pos Pred Value : 0.9392
# Neg Pred Value : 0.2437
# Prevalence : 0.8957
# Detection Rate : 0.7157
# Detection Prevalence : 0.7620
# Balanced Accuracy : 0.6775
#
# 'Positive' Class : 0
# polynomial kernel SVM classifier
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
print(cm)
# Confusion Matrix and Statistics
#
# predicted
# 0    1
# 0 2147  139
# 1  540  174
#
# Accuracy : 0.7737
# 95% CI : (0.7583, 0.7885)
# No Information Rate : 0.8957
# P-Value [Acc > NIR] : 1
#
# Kappa : 0.2267
# Mcnemar's Test P-Value : <2e-16
#
# Sensitivity : 0.7990
# Specificity : 0.5559
# Pos Pred Value : 0.9392
# Neg Pred Value : 0.2437
# Prevalence : 0.8957
# Detection Rate : 0.7157
# Detection Prevalence : 0.7620
# Balanced Accuracy : 0.6775
#
# 'Positive' Class : 0
confusionMatrix(cm)
# polynomial kernel SVM classifier
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'nu-classification',
kernel = 'polynomial')
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# radial basis kernal SVM classifier
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'radial basis')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'one-classification',
kernel = 'radial basis')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'one-classification',
kernel = 'sigmoid')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'sigmoid')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'nu-classification',
kernel = 'sigmoid')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
radial_basis_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'sigmoid')
# Predicting the Test set results
predicted = predict(radial_basis_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'polynomial', degree=5)
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# polynomial kernel SVM classifier
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'polynomial', degree=8)
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'polynomial', degree=6)
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
polynomial_kernel_svm = svm(formula = left ~ ., data = training_set,
type = 'C-classification',
kernel = 'polynomial', degree=4)
# Predicting the Test set results
predicted = predict(polynomial_kernel_svm, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# Naive Bayes Classifier
# setting current working directory programatically using 'rstudioapi'
if (!"rstudioapi" %in% installed.packages()) { install.packages("rstudioapi") }
library(rstudioapi)
current_path = getActiveDocumentContext()$path
setwd(dirname(current_path ))
# importing dataset
dataset = read.csv('project_dataset.csv')
# finding levels of categorical columns
sapply(dataset, levels)
# target is 7th column
# factoring 'left' column
dataset$left = factor(dataset$left, levels = c(0, 1))
# factoring 'salary' column
dataset$salary = factor(dataset$salary,
levels = c('low', 'medium', 'high'),
labels = c(1, 2, 3))
# factoring 'department' column
dataset$department = factor(dataset$department,
levels = c('accounting', 'hr', 'IT', 'management', 'marketing',
'product_mng', 'RandD', 'sales', 'support', 'technical'),
labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# splitting dataset into training set and test set
if (!"caTools" %in% installed.packages()) { install.packages("caTools") }
library(caTools)
set.seed(123)
split = sample.split(dataset$left, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# feature Scaling of numeric columns
cols_to_scale= c("satisfaction_level", "last_evaluation", "number_project", "average_montly_hours",
"time_spend_company", "Work_accident", "promotion_last_5years")
training_set[, cols_to_scale] = scale(training_set[, cols_to_scale])
test_set[, cols_to_scale] = scale(test_set[, cols_to_scale])
# library 'caret' for Confusion Matrix and finding accuracy of prediction
if (!"caret" %in% installed.packages()) { install.packages("caret") }
library(caret)
# importing library 'e1071' for Naive Bayes
if (!"e1071" %in% installed.packages()) { install.packages("e1071") }
library(e1071)
# naive bayes classifier model
model = naiveBayes(x = training_set[-7],
y = training_set$left)
# Predicting the Test set results
predicted = predict(model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.5, eps=0.5, threshold=0.7)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
simple_naive_bayes_model
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.5, eps=0.5, threshold=0.1)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.001, threshold=0.1)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.0001, threshold=0.1)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.0001, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.002, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.1, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=0.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.001, threshold=0.001)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.001, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=100.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=5000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=2000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model
simple_naive_bayes_model = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=1500.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(simple_naive_bayes_model, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
# naive bayes classifier model with laplace value given
naive_bayes_model_with_laplace = naiveBayes(x = training_set[-7],
y = training_set$left, laplace=2000.5, eps=0.1, threshold=0.5)
# Predicting the Test set results
predicted = predict(naive_bayes_model_with_laplace, newdata = test_set[-7])
cm = table(test_set[, 7], predicted)
confusionMatrix(cm)
